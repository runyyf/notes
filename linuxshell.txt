recursively  -r
./当级路径    ../前一级路径    ../../ 前两级路径     相对路径（相对于当前目录）	
chmod  777 pi (777 表示对文件拥有者，文件拥有者所在组，其他，都赋予读写执行权限，4--读，2---写 ， 1---执行)
chmod a+rwx pi (user --- u ,group----g,all---a)
sudo chown root pi  临时给pi用户赋予root权限

linux distribution 

sync 将内存中的数据写入到硬盘中


shutdown -h now
shutdown -r now
touch 123.txt  //创建文件
rm  -r(folder)  (if have no parameter ,defalut is file) 123  -f(enforce delete)



chkconfig -add serveice_name    // add system_service
ls -F  				//  different the directories and files 


cat -n // 文本查看器   （-n 查看行数）

df  // check the disk 
									
tail -f  // 可以在其他进程占用该文件的时候查看该文件



关于进程 20150421 

gun ps 支持参数
1.unix类参数  前面有短划线
2.bsd类型参数  前面没有短划线
3.gun长参数   前面有双短划线



ps -ef //显示所有进程，
ps -l  其他信息长格式输出

其中（s代表运行状态，o= 运行 ，s=睡眠，r=可运行，等待运行，z=死进程）


top
cpu(us=使用中，sy==系统，ni=用户，id=硬件检测，wa==硬件支配)


kill  3390  // 杀死进程 只能用PID
killall   //进程的名字来杀





磁盘监控
mount  //用于挂载存储介质

fdisk -l  //查看挂载的U盘的位置

mount -t vfat /dev/sdb1  /mnt/usb -o iocharset=gb2312

-t 指的是类型  vfat代表fat32   gb2312中文字符集


umount /mnt/usb  //卸载U盘

df -h  查看磁盘可用情况

grep [options] pattern [files]  //search some line have pattern

ex:

grep three file1 ;  //search "three" in file which name is "file1"
grep -v three file1 ;// 反向查找
-n  // display row number

grep [tf] file1 ; //正则表达式 ，包含t或者f的行数
 


压缩和解压
gzip file1 , gunzip file1 ;

归档数据(cmd :  tar )
-c  // creat
-x  // excreat
-v  //处理过程中处理文件

tar -cvf test.tar test/ test2/
tar -tf test.tar
tar -xvf test.tar





 第五章  使用linux环境变量

1.设置本地变量
ex :
  $ test=testing 
  $ echo $test
  testing 

带空格的话要加单引号

test='test a long string'

export 设置为全局变量
unset  移除全局变量


 
添加PATH路径(PATH定义了bash搜索命令的目录)

PATH=$PATH:/home/rich/test

ehco $PATH

常用的技巧： PATH=$PATH:.


登录shell

1./etc/profile

2.$HOME/.bash_profile ;  //在HOME目录中寻找 .bashrc , '.bashrc' 检查 /etc下的公共bashrc文件并执			  行，同时 /etc/bashrc 执行/etc/profile.d

3.$HOME/.bash_login ;
4.$HOME/.profile




环境变量作为变量数组

$mytest=(one two three four five)
$echo ${mytest[2]}
$echo ${mytest[*]}  //全部打印
$unset mytest       //移除mytest


创建别名命令 alias
alias  li='ls -il'
 

第六章  理解linux文件的权限

/etc/passwd 文件中包含用户信息   

/usr/sbin/useradd test //增加test用户
/usr/sbin/userdel test //delete test用户

UID  用户id
GID  用户组id

usermod ex:

      1、将 newuser2 添加到组 staff 中 
          # usermod -G staff newuser2 
      2、修改 newuser 的用户名为 newuser1 
          # usermod -l newuser1 newuser 
      3、锁定账号 newuser1 
          # usermod -L newuser1 
      4、解除对 newuser1 的锁定 
          # usermod -U newuser1

      5.  usermod -p 12345678 login  
 

chsh  修改启动脚本
















第二部分.shell脚本的基础知识


第八章.基本脚本编译



//ehco要打印字符串中有单引号要把整句话都用双引号引起来

$echo 'rich says "scripting is easy " '.
rich says "scripting is easy"


//使用变量

#!/bin/bash
#test varilables
days=10
guest="Katie"
echo "$guest checked in $days days ago"
days=5
guest="Jessica"
echo "$guest checked in $days days ago


out:

Katie checked in 10 days ago
Jessica checked in 5 days ago


引用变量之前一定要用美元



//反引号允许将shell命令的输出赋值给变量
#!/bin/bash
#using the backtick character

testing=`date`
echo the data and time are: $testing


out:
the data and time are: 2015年 04月 29日 星期三 15:01:45 HKT


输出重定向

>重定向输出 ，重写整个文件
>>重定向输出，继续写文件，不重写

date>test;

cat test ;




输入重定向
wc<test

内置输入重定向,将命令行输入作为命令的输入
[root@localhost test]# wc << EOF
> test1
> test2
> test3
> test4
> test5
> EOF
 5  5 30

管道  rpm -qa | sort



//数学计算
#!/bin/bash
var1=100
var2=50
var3=45
var4=$[$var1*($var2-$var3)]
echo the final result is $var4

[root@localhost test]# ./test.sh 
the final result is 500


//如果要用到浮点数计算
用到bc计算器

#!/bin/bash
var1=100
var2=45
var3=`echo "scale=4; $var1 / $var2" |bc`
echo the answer for this is $var3

scale 表示小数位


#!/bin/bash
var1=10.46
var2=43.67
var3=33.2
var4=71

var5=`bc<<EOF
scale = 4
a1=($var1*$var2)
b1=($var3*$var4)
a1 + b1
EOF
`

echo The final answer this mess is $var5

[root@localhost test]# ./test_bc_1 
The final answer this mess is 2813.9882


echo $? //命令执行状态   0表示成功



第九章 使用结构化的命令


//if - then - fi  命令
#!/bin/bash
#test a bad command

if asdfg
then
   echo "it didn't work"
fi

echo "we're outside of the if statement"




[root@localhost test]# ./test2
./test2: line 4: asdfg: command not found
we're outside of the if statement




//查找用户名
#!/bin/bash

echo hello,world

testuser=stb
if grep $testuser /etc/passwd
then
  echo the bash files for user $testuser are:
  ls -a /home/$testuser/.b*
fi

echo $?



//out

root@localhost test]# ./test3
hello,world
stb:x:500:500:stb:/home/stb:/bin/bash
the bash files for user stb are:
/home/stb/.bash_history  /home/stb/.bash_logout  /home/stb/.bash_profile  /home/stb/.bashrc
0

if command1
then     
   command2  // command1 return 0 
else 
   command3  // command1 return 1 
fi


if command1
then 
	command2
elif command3
then 
	command4
fi




#!/bin/bash

testuser=stb1
if grep $testuser /etc/passwd
then
        echo 1111
elif date
then
        echo 222
fi

echo 4444

//output
[root@localhost test]# ./test4
2015年 05月 05日 星期二 17:24:23 HKT
222
4444





#!/bin/bash

if [ 10 -gt 5 ]
then
        echo 11111
else
        echo 2222
fi


//output
[root@localhost test]# ./test5
11111


数字比较
大于--greater than  等于--equal than  小于--less than


字符串比较
-n str1  //检查str1的长度是否大于0
-z str1  //检查str1的长度是否是0


//字符串比较
#!/bin/bash

val1=aaa
val2=bb

if [ $val1>$val2 ]
then
        echo "$val1  is greater than $val2 "
else
        echo "$val1  is less  than $val2 "
fi

echo 12345

if [ -n $val1 ]
then
        echo "$val1 's length is greater than 0"
else
        echo "$val1 's length is less than 0"
fi

echo 23456


[root@localhost test]# ./test6
aaa  is greater than bb 
12345
aaa 's length is greater than 0
23456


在[]结构中">"需要被转义


//检查目录是否存在，检查文件用[-f $HOME],文件是否可以被执行[-x $HOME]

if [ -d $HOME ]
then
        echo "your HOME directory exit"
        echo $HOME
        cd $HOME
        ls -a
else
        echo "your HOME directory isn't exit"
fi


[root@localhost test]# ./test11
your HOME directory exit
/root
.                .dbus            .gtkrc-1.2-gnome2       .recently-used.xbel  .xauthf38mAN
..               .dmrc            .ICEauthority           .scim                .xauthlnDc4T
aaa              .elinks          .icons                  scsrun.log           .xsession-errors
.adobe           .esd_auth        install.log             .subversion          
anaconda-ks.cfg  .fonts.cache-1   install.log.syslog      .tcshrc              
.bash_history    .gconf           .local                  .themes              
.bash_logout     .gconfd          .macromedia             .thumbnails          
.bash_profile    .gnome           .metacity               .tomboy              
.bashrc          .gnome2          .mozilla                .tomboy.log          
.chewing         .gnome2_private  .nautilus               .Trash               
.config          .gstreamer-0.10  nautilus-debug-log.txt  .viminfo            
.cshrc           .gtk-bookmarks   .pulse-cookie           .wapi



第十章 更多结构化的命令

//for命令

#!/bin/bash

for test in i dont\'t know if "this'll" work
do
        echo "word:$test"
done

[root@localhost test]# ./test13
word:i
word:dont't
word:know
word:if
word:this'll
word:work


//从文件中读取内容
#!/bin/bash
#reading values from a file

file="bb"

for state in `cat $file`
do
        if [ $state -eq 1111 ]
        then
                echo "Visit Beautiful $state"
        fi
done

[root@localhost test]# ./test14
visit Beautiful 1111


//如果数据中有空格，则之上的方法是不能读取到完整的字符串的
  默认情况下，bash shell将（空格，制表符，换行符作为分隔符）

IFS=$'\n' 把分隔符设置为换行符

在脚本中最好保存一下IFS值

IFS.OLD=$IFS
IFS=$'\n'
<use the new IFS value in code>
IFS=$IFS.OLD




//文件通配符查找文件

#!/bin/bash

for file in /home/test/*
do
        if [ -d $file ]
        then
                echo "$file is a directory"
        elif [ -f $file ]
        then
                echo "$file is a file"
        fi

done


//tips

linux中文件名和路径是支持存在空格的，因此我们要在文件名上加上双引号
如[ -d "$file"]这样子



//c的for语句
#!/bin/bash


for (( a=1,b=10; a<=10; a++,b--  ))
do
        echo "$a - $b"
done

[root@localhost test]# ./test16
1 - 10
2 - 9
3 - 8
4 - 7
5 - 6
6 - 5
7 - 4
8 - 3
9 - 2
10 - 1



#!/bin/bash

var1=10
while [ $var1 -gt 0 ]
do
        echo $var1
        var1=$[ $var1-1 ]
done

[root@localhost test]# ./test16
10
9
8
7
6
5
4
3
2
1

while   echo $var1
        [ $var1 -gt 0 ]


//跳出内循环

#!/bin/bash

var1=1

while [ $var1 -lt 10 ]
do
        if [ $var1 -eq 5 ]
        then
                break
        fi
        echo "Iteration: $var1"
        var1=$[ $var1 +1]
done

echo "the while loop is completed"




//跳出外循环，break 1 跳出当前循环 。break 2 跳出当前上一级循环

#!/bin/bash

for(( a=1; a<4 ;a++ ))
do
        echo "Outer loop $a"
        for (( b=1;b<100;b++))
        do
                if [ $b -gt 4 ]
                then
                        break 2
                fi
                echo "Inner loop: $b"
        done
done



//将输入输入到文件
#!/bin/bash

for file in /home/test/*
do
        if [ -d "$file" ]
        then
                echo "$file is a directory"
        else
                echo "$file is a file"
        fi

done > output.txt



//读取命令行输入
#!/bin/bash

factorial=1
for (( number =1;number <= $1;number++))
do
        factorial=$[ $factorial * $number ]
done
echo the factorial of $1 is $factorial


[root@localhost test]# ./test3 5
the factorial of 5 is 120



$0代表程序名称  $1代表第一个参数 $2代表第二个参数。。。。。
$#输入参数计数


#!/bin/bash

if [ -n "$1" ]
then
        echo hello $1,$# ,glad to meet you
else
        echo "sorry,there haven't input"
fi

[root@localhost test]# ./test 1 2 3 4
hello 1,4 ,glad to meet you



//关于${$#}的问题

#!/bin/bash

params=$#
echo the last parameter is $params
echo the last parameter is ${!#}

[root@localhost test]# ./test
the last parameter is 0
the last parameter is ./test






















